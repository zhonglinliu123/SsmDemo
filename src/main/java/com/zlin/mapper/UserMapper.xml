<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zlin.mapper.UserMapper" >
    <resultMap id="BaseResultMap" type="com.zlin.pojo.User" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="name" property="name" jdbcType="VARCHAR" />
        <result column="age" property="age" jdbcType="INTEGER" />
        <result column="sex" property="sex" jdbcType="VARCHAR" />
    </resultMap>

    <select id="selectAllUser" resultMap="BaseResultMap">
        select * from user
    </select>

    <!-- parameterType="int" -->

    <!-- # $ 取值是从parameterType中取值,需要提供set/get方法 -->
    <select id="selectUserById" resultMap="BaseResultMap" parameterType="com.zlin.pojo.User">
        select * from user where id = ${id}
    </select>

    <!--  $ 需要在String类型需要加上' ' 或者 " "  -->
    <!-- # 不用加 -->
    <select id="selectUserByName" resultMap="BaseResultMap" parameterType="com.zlin.pojo.User">
        select * from user where name = "${name}"
    </select>

    <insert id="insertUser" parameterType="com.zlin.pojo.User" >
        insert into user(name,age,sex) values(#{name},#{age},#{sex})
    </insert>

    <delete id="deleteUser" parameterType="com.zlin.pojo.User">
        delete from user where name = #{name}
    </delete>

    <!--    1 #是将传入的值当做字符串的形式，eg:select id,name,age from user where id =#{id},当前端把id值1，传入到后台的时候，就相当于 select id,name,age from user where id ='1'.-->

    <!--    2 $是将传入的数据直接显示生成sql语句，eg:select id,name,age from user where id =${id},当前端把id值1，传入到后台的时候，就相当于 select id,name,age from user where id = 1.-->

    <!--    3 使用#可以很大程度上防止sql注入。(语句的拼接  #{xxx},使用的是PreparedStatement,会有类型转换，比较安全 简单的说就是#{}是经过预编译的，是安全的，${}是未经过预编译的，仅仅是取变量的值，是非安全的，存在SQL注入。）-->

    <!--    4 但是如果使用在order by 中就需要使用 $.-->

    <!--    5 在大多数情况下还是经常使用#，但在不同情况下必须使用$.-->
</mapper>